image: clashlang/clash-ci:2019-12-03

stages:
  - build
  - test # TODO: prevent cache throwouts if test failed
  - publish

.build-common:
  stage: build
  interruptible: true

  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    TERM: xterm-color

  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

  cache:
    key: cabal-store-$CI_JOB_NAME
    paths:
      - $HOME/.cabal/config
      - $HOME/.cabal/store
      - $HOME/.cabal/packages/hackage.haskell.org/01-index.*
      - $HOME/.cabal/packages/hackage.haskell.org/snapshot.json
      - $HOME/.cabal/packages/hackage.haskell.org/timestamp.json

.build-init: &build-init
  - unset SNAPCRAFT_LOGIN_FILE
  - unset HACKAGE_PASSWORD
  - export THREADS=$(nproc)

.build-fini: &build-fini
  - export
  - .ci/build.sh

build-8.4.4:
  extends: .build-common
  
  script:
    - *build-init
    - export CABAL_VERSION=2.4
    - export GHC_VERSION=8.4.4
    - export CLASH_MULTIPLE_HIDDEN=+multiple-hidden
    - *build-fini

build-8.6.5:
  extends: .build-common

  script:
    - *build-init
    - export CABAL_VERSION=2.4
    - export GHC_VERSION=8.6.5
    - export CLASH_MULTIPLE_HIDDEN=-multiple-hidden
    - *build-fini

build-8.8.1:
  extends: .build-common

  script:
    - *build-init
    - export CABAL_VERSION=3.0
    - export GHC_VERSION=8.8.1
    - export CLASH_MULTIPLE_HIDDEN=+multiple-hidden
    - *build-fini

build-8.10.1:
  extends: .build-common

  script:
    - *build-init
    - export CABAL_VERSION=head
    - export GHC_VERSION=8.10.1
    - export CLASH_MULTIPLE_HIDDEN=+multiple-hidden
    - *build-fini

.test-common:
  stage: test

  script:
    - .ci/test.sh

test-8.4.4:
  extends: .test-common
  needs: ['build-8.4.4']

test-8.6.5:
  extends: .test-common
  needs: ['build-8.6.5']

test-8.8.1:
  extends: .test-common
  needs: ['build-8.8.1']

test-8.10.1:
  extends: .test-common
  needs: ['build-8.10.1']

# TODO

hackage-sdist:
  extends: build-8.8.1
  interruptible: false

  script:
    - export GHC="${GHC:-$CI_JOB_NAME}"
    - export THREADS=$(nproc)
    - export CABAL_JOBS=$(nproc)
    - .ci/setup.sh
    - .ci/build_sdist.sh clash-prelude
    - .ci/build_sdist.sh clash-lib
    - .ci/build_sdist.sh clash-ghc

  artifacts:
    paths:
      - clash-*.tar.gz  # clash-{prelude,lib,ghc}-$version{-docs,}.tar.gz
    expire_in: 1 week
  only:
    - tags
    - schedules
    - triggers

.hackage:
  extends: test-8.8.1
  interruptible: false
  stage: publish
  cache:
    key: hackage
  variables:
    GHC: ghc-8.8.1
  script:
    - export GHC="${GHC:-$CI_JOB_NAME}"
    - export THREADS=$(nproc)
    - export CABAL_JOBS=$(nproc)
    - .ci/setup.sh
    - .ci/publish_sdist.sh clash-prelude
    - .ci/publish_sdist.sh clash-lib
    - .ci/publish_sdist.sh clash-ghc

# "Publish" a release candidate
hackage-release-candidate:
  extends: .hackage

  variables:
    HACKAGE_RELEASE: "no"

  only:
    - schedules
    - triggers

# Release new version of Clash to Hackage
hackage-release:
  extends: .hackage

  variables:
    HACKAGE_RELEASE: "yes"

  only:
    - tags

# Create a binary distribution using nix, and store it in a tarball. A special
# nix distribution is used that has its store installed on /usr/nix/store,
# instead of the default /nix. This is used to work around a know limitation
# of snap layouts. As of August 2019 the snapcraft docs mention:
#
#  > Layouts cannot currently create new top-level files or directories.
#  >
#  >  - https://snapcraft.io/docs/snap-layouts
#
# If this limitation is ever annulled, we can use a "proper" nix distribution.
snap-bindist:
  image: clashlang/nixbuntu:2.3.1
  stage: build
  cache:
    key: usr-nix-$CI_JOB_NAME
    paths:
      # GitLab CI uses zip as a cache archive. For some reason, nix can't
      # handle this (wrong permissions, missing symlinks?), so we pre-tar it.
      - usr_nix.tar.xz
  artifacts:
    when: always
    paths:
      - nix_build.log
      - bindist/linux/snap/clash-snap-bindist.tar.xz
    expire_in: 1 week
  script:
    # TODO: Clean up nix-store after building
    - export XZ_DEFAULTS="-T 0 -3"
    - export ROOT=$(pwd)
    - tar xf usr_nix.tar.xz -C / || true
    - apt update
    - apt install ksh -y  # TODO: Remove need for ksh in mkBinDist.sh
    - cd bindist/linux/snap && ./mkBinDist.sh &> $ROOT/nix_build.log
    - tar cJf $ROOT/usr_nix.tar.xz /usr/nix

  # Run every night, when explicitly triggered, or when tagged (release)
  only:
    - schedules
    - triggers
    - tags

# Use binary distribution built in `snap-bindist` to build a snap pacakge.
.snap:
  image: snapcore/snapcraft
  stage: publish
  cache:
    key: snap-last-run-hash
    paths:
      - snap-last-run-hash
  artifacts:
    when: always
    paths:
      - bindist/linux/snap/*.snap
    expire_in: 1 week
  script:
    - apt update
    - apt install git -y
    - touch snap-last-run-hash
    - |
      if [ "$(cat snap-last-run-hash)" == "$(git rev-parse HEAD)-${RELEASE_CHANNEL}" ]; then
        echo "Already built and published $(git rev-parse HEAD) on ${RELEASE_CHANNEL}. Nothing to do!";
        exit 0;
      fi
    - git rev-parse HEAD > snap-last-run-hash
    - echo "-${RELEASE_CHANNEL}" >> snap-last-run-hash
    - cd bindist/linux/snap
    - echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage > snapcraft.login
    - snapcraft login --with snapcraft.login
    - snapcraft
    - snapcraft push *.snap --release ${RELEASE_CHANNEL}

snap-edge:
  extends: .snap
  variables:
    RELEASE_CHANNEL: edge
  only:
    - schedules
    - triggers

snap-stable:
  extends: .snap
  variables:
    RELEASE_CHANNEL: stable
  only:
    - tags
